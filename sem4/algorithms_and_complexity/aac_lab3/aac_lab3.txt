#include <iostream>
#include <vector>
#include <cmath>
#include <queue>

using namespace std;

struct Complex { //опис комплексного числа та операцій над ним
    double real;
    double imaginary;

    Complex(double r, double i) : real(r), imaginary(i) {}

    Complex operator+(const Complex& other) const {
        return Complex(real + other.real, imaginary + other.imaginary);
    }


    bool operator<(const Complex& other) const {
        return sqrt(real * real + imaginary * imaginary) < sqrt(other.real * other.real + other.imaginary * other.imaginary);
    }

    bool operator==(const Complex& other) const {
        return real == other.real && imaginary == other.imaginary;
    }

    friend ostream& operator<<(ostream& os, const Complex& c) {
        os << "(" << c.real << ", " << c.imaginary << ")";
        return os;
    }
};



class BPlusTree { //клас для В+ дерева та операцій на ньому
private:
    struct Node { //структура вузла
        vector<Complex> keys;
        vector<Node*> children;
        bool isLeaf;

        Node(bool leaf) : isLeaf(leaf) {}
    };
   
    Node* root;
    int order; 

public:
    BPlusTree(int order) : root(nullptr), order(order) {}

    void insert(const Complex& value) { //вставка вузла
        if (!root) {
            root = new Node(true);
            root->keys.push_back(value);
        }
        else {
            Node* leaf = findLeaf(root, value);
            insertIntoLeaf(leaf, value);
            if (leaf->keys.size() == order) {
                splitLeaf(leaf);
            }
        }
    }

    void remove(const Complex& value) { //видалення вузла
        if (!root) {
            return;
        }
        removeRecursive(root, value);

        if (root->keys.empty() && !root->isLeaf) {
            Node* oldRoot = root;
            root = root->children[0];
            delete oldRoot;
        }
    }

    void removeRecursive(Node* node, const Complex& value) { //рекурсивна фнкція видалення
        if (node->isLeaf) {
            auto it = find(node->keys.begin(), node->keys.end(), value);
            if (it != node->keys.end()) {
                node->keys.erase(it);
            }
        }
        else {
            int index = 0;
            while (index < node->keys.size() && value < node->keys[index]) {
                index++;
            }
            removeRecursive(node->children[index], value);
        }

        if (node->isLeaf && node->keys.empty() && node != root) {
            Node* parent = getParent(root, node);
            auto it = find(parent->children.begin(), parent->children.end(), node);
            parent->children.erase(it);
            delete node;
        }
    }


    Node* getParent(Node* currentNode, Node* childNode) { //пошук батьківського вузла
        if (currentNode->isLeaf || currentNode->children[0]->isLeaf) {
            return nullptr;
        }
        for (size_t i = 0; i < currentNode->children.size(); ++i) {
            if (currentNode->children[i] == childNode) {
                return currentNode;
            }
            else if (childNode->keys[0] < currentNode->keys[i] && i == 0) {
                return getParent(currentNode->children[i], childNode);
            }
            else if (i + 1 < currentNode->keys.size() && currentNode->keys[i] < childNode->keys[0] && childNode->keys[0] < currentNode->keys[i + 1]) {
                return getParent(currentNode->children[i + 1], childNode);
            }
        }
        return nullptr;
    }

    Node* findLeaf(Node* node, const Complex& value) { //пошук листка
        if (node->isLeaf) {
            return node;
        }
        else {
            int index = 0;
            while (index < node->keys.size() && value < node->keys[index]) {
                index++;
            }
            return findLeaf(node->children[index], value);
        }
    }


    void insertIntoLeaf(Node* leaf, const Complex& value) { //вставка в листок
        auto it = lower_bound(leaf->keys.begin(), leaf->keys.end(), value);
        leaf->keys.insert(it, value);
    }

    void splitLeaf(Node* leaf) { //поділ листка
        int mid = leaf->keys.size() / 2;
        Node* newLeaf = new Node(true);
        newLeaf->keys.assign(leaf->keys.begin() + mid, leaf->keys.end());
        leaf->keys.erase(leaf->keys.begin() + mid, leaf->keys.end());

        if (leaf == root) {
            Node* newRoot = new Node(false);
            newRoot->keys.push_back(newLeaf->keys[0]);
            newRoot->children.push_back(leaf);
            newRoot->children.push_back(newLeaf);
            root = newRoot;
        }
        else {
            insertIntoParent(leaf, newLeaf->keys[0], newLeaf);
        }
    }

    void insertIntoParent(Node* left, const Complex& key, Node* right) { //вставка в батьківський вузол
        Node* parent = getParent(root, left);
        parent->keys.push_back(key);
        parent->children.push_back(right);
        if (parent->keys.size() == order) {
            splitNode(parent);
        }
    }

    void splitNode(Node* node) { //поділ вузла 
        int mid = node->keys.size() / 2;
        Node* newSibling = new Node(node->isLeaf);
        newSibling->keys.assign(node->keys.begin() + mid + 1, node->keys.end());
        node->keys.erase(node->keys.begin() + mid, node->keys.end());

        if (!node->isLeaf) {
            newSibling->children.assign(node->children.begin() + mid + 1, node->children.end());
            node->children.erase(node->children.begin() + mid + 1, node->children.end());
        }

        if (node == root) {
            Node* newRoot = new Node(false);
            newRoot->keys.push_back(node->keys[mid]);
            newRoot->children.push_back(node);
            newRoot->children.push_back(newSibling);
            root = newRoot;
        }
        else {
            insertIntoParent(node, node->keys[mid], newSibling);
        }
    }

    

    void printTree() { //виведення дерева
        if (!root) {
            cout << "Tree is empty" << endl;
            return;
        }

        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                Node* node = q.front();
                q.pop();

                for (const auto& key : node->keys) {
                    cout << key << " ";
                }
                cout << "| ";

                if (!node->isLeaf) {
                    for (Node* child : node->children) {
                        q.push(child);
                    }
                }
            }
            cout << endl;
        }
    }
};

int main() { //основна функція
    BPlusTree tree(3); 
    tree.insert(Complex(-3, 4));
    tree.insert(Complex(5, -6));

    
    tree.printTree();


  
    return 0;
}
